<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guerre Commerciale</title>
    <link>https://xingyuliunlp.github.io/projet_encadre/</link>
      <atom:link href="https://xingyuliunlp.github.io/projet_encadre/index.xml" rel="self" type="application/rss+xml" />
    <description>Guerre Commerciale</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>fr</language><copyright>Xiaoou WANG,Xingyu LIU&amp;2019</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>https://xingyuliunlp.github.io/projet_encadre/img/icon-192.png</url>
      <title>Guerre Commerciale</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/</link>
    </image>
    
    <item>
      <title>Cours 2 - Préambule Unix I</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/1/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0200</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/1/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Système de fichiers&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Sous windows, il y a plusieurs arborescences tandis que sous unix, on a qu’une arborescence.
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pwd # print repertoire actuel
cd .. # remonte au repertoire parent
cd / # aller a la racine
echo &amp;quot;# exemple de l&#39;arborescence de la racine sous Mac&amp;quot;
ls # exemple de l&#39;arborescence de la racine sous Mac
cd ~ # aller a home
echo &amp;quot;# sortie de la commande cat&amp;quot;
echo &amp;quot;Bonjour&amp;quot; &amp;gt; test.txt
cat test.txt # visualiser le contenu d&#39;un fichier
echo &amp;quot;# montrer les metadonnes du contenu&amp;quot;
wc test.txt # la commande egale wc -mlw, m = caractere l = ligne, w = mots
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/Users/becca/Downloads/siteProjetEncadre/content/blog
# exemple de l&#39;arborescence de la racine sous Mac
Applications
Developer
Incompatible Software
Library
Network
System
Users
Volumes
anaconda3
bin
cores
dev
etc
home
installer.failurerequests
net
opt
private
sbin
tmp
usr
var
# sortie de la commande cat
Bonjour
# montrer les metadonnes du contenu
       1       1       8 test.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 3 - Préambule Unix II</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/2/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0200</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/2/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;1. Flux d&amp;rsquo;entrée &amp;amp; de sortie &amp;amp; d&amp;rsquo;erreur&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# flux d’erreur standard &amp;quot;&amp;gt;&amp;gt;&amp;quot; (sortie normal) vs. 2&amp;gt; (canal d’erreur)
cd ~
lsd &amp;gt; sortie.txt 2&amp;gt; erreur.txt
# exercice : transformer tous les n en N d&#39;un fichier et l&#39;enregistrer dans un autre fichier
tr &amp;quot;n&amp;quot; &amp;quot;N&amp;quot; &amp;lt; test.txt &amp;gt; testN.txt
cat testN.txt
# Exercice : majusculiser les données
tr &amp;quot;[[:lower:]]&amp;quot; &amp;quot;[[:upper:]]&amp;quot; &amp;lt; test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BoNjour
BONJOUR
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;2. Redirection du flux d’information&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;
Récupérer l’output de la première commande et le réenvoyer à la deuxième commande - symbole clé : pipe |&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# transformer &amp;quot;é&amp;quot; en &amp;quot;E&amp;quot; puis majusculiser l&#39;output de la première commande
cd ~
tr &amp;quot;é&amp;quot; &amp;quot;E&amp;quot; &amp;lt; test.txt | tr &amp;quot;[[:lower:]]&amp;quot; &amp;quot;[[:upper:]]&amp;quot;
# trier par le premier champ - sort ; filtrage de doublons - uniq
egrep -o &amp;quot;\w+&amp;quot; test.txt | sort | uniq -c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BONJOUR
   1 Bonjour
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;3. Sectionner les données par champ (un champ est defini par un symbole qui delimite ce champ particulier)&lt;/font&gt;&lt;/center&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# couper les données en 2 champs par le délimiteur &amp;quot;=&amp;quot;
cd ~
echo &amp;quot;la somme de 2+2=4&amp;quot; &amp;gt; test2.txt
cut -f2 -d&amp;quot;=&amp;quot; test2.txt
# utiliser read pour capturer la saisie de l&#39;utilisateur et la stocker dans une variable
echo &amp;quot;nom ?&amp;quot; ;
# read nom;
echo &amp;quot;bonjour $nom&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
nom ?
bonjour 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nom ?&lt;/p&gt;

&lt;p&gt;wang&lt;/p&gt;

&lt;p&gt;bonjour wang&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cours 4 - Préparation du projet</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/3/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0200</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/3/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Configuration du terrain
&lt;/font&gt;&lt;/center&gt;&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nous avons créé l&amp;rsquo;arborescence de travail à l&amp;rsquo;aide du script bash suivant nommé &amp;lsquo;prepare-environnement-projet.sh&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
mkdir PROJET_MOT_SUR_LE_WEB
cd PROJET_MOT_SUR_LE_WEB
# on peut desormais creer l&#39;arborescence de travail
mkdir ./CONTEXTES;
mkdir ./DUMP_TEXT;
mkdir ./IMAGES;
mkdir ./PAGES_ASPIREES;
mkdir ./PROGRAMMES;
mkdir ./TABLEAUX;
mkdir ./URLS;
# les lignes precedentes peuvent tenir sur une seule ligne
# a savoir mkdir ./CONTEXTES ./DUMP_TEXT etc....
# le dossier URLS contiendra le fichier initial d&#39;URLs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Il suffit de nous positionner dans le même répertoire que ce script et l&amp;rsquo;exécuter avec bash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash prepare-environnement-projet.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Etape 1 : lire les fichiers URL et écrire leurs contenus ligne par ligne dans un nouveau fichier&lt;/font&gt;&lt;/center&gt;&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;
&lt;em&gt;J&amp;rsquo;ai une remarque sur la manière dont on utilise pour récupérer tous les fichiers dans un répertoire. J&amp;rsquo;ai utilisé /chemin/* au lieu de $(ls /chemin) car ce dernier m&amp;rsquo;apparaît un peu lourd mais je vois pas leur différence au niveau de sortie&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# !/bin/bash
# on commence par effacer l&#39;éventuel contenu de ficher que l&#39;on doit réécrire
echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
# on récupère les 2 arguments que l&#39;on a passé au programme
# le premier : chemin vers le dossier contenant les fichiers d&#39;URL
# le second : chemin vers le dossier devant contenir le fichier HTML final
echo &amp;quot;les urls sont dans : $1&amp;quot;;
echo &amp;quot;chemin de stockage : $2&amp;quot;;
# pour tous les fichiers dans le répertoire 1
for fichier in $1/*
# on exécute les commandes suivantes
do
# compteur destiné à compter les URLs pour chaque fichier d&#39;URL
compteur=1;
echo &amp;quot;$fichier&amp;quot;;
  for ligne in $(cat &amp;quot;$fichier&amp;quot;)
  do
  echo &amp;quot;$compteur : $ligne&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
  # on incrémente le compteur des URLs
  compteur=$((compteur+1))
  done
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 6 - Détection de l’encodage d’URL</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/4/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0200</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/4/</guid>
      <description>&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Pour conclure ce que nous avons fait les trois dernières séances :&lt;/font&gt;&lt;/center&gt;&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nous avons établi d’abord des tables de base contenant des URLs. Ce qui est réalisé à l’aide de deux boucles for, une pour parcourir tous nos fichiers d’URLs et construire une table pour chaque fichier, soit chaque langue ainsi que la deuxième servant à lire les URLs et les écrire dans nos tables ligne à ligne. Nous avons appris que le shell utilise des variables d’environnement dont l’on peut faire apparaître le contenu avec le signe dollars “$”. En utilisant ce signe, nous pouvons stocker et réutiliser le numéro de ligne et le contenu de ligne.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ayant pour but de scrap le contenu de page web et faire éventuellement des analyses textuelles au-dessus, nous avons utiliser les commandes curl et lynx. Deux nouvelles colonnes ont été rajoutées pour les liens locaux de fichier html et txt dirigés vers le contenu sans format et celui de texte brut de page web.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, ce processus de scrap n’est pas si facile à cause des problèmes d’URLs ou de l’encodage. Nous avons ainsi détecté si le code d’état de page web est 200 qui veut dire le succès de la requête et si l’encodage est UTF-8. Le résultat de ces vérification décide nos prochains processus. Ces deux information ont également été rajoutées dans nos tables.
&lt;img src=&#34;https://xingyuliunlp.github.io/projet_encadre/projet_encadre/blog/2019-10-23-séance-4-détection-de-l-encodage-d-url_files/tableUrl.jpg&#34; width =&#34;95%&#34;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Problèmes rencontrés&lt;/font&gt;&lt;/center&gt;&lt;/font&gt;&lt;/center&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Je n’ai pas pris conscience de l’influence d’espace dans le script bash jusqu’au moment de l’apparition des informations d’erreurs suivantes :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[200: command not found # ou [405: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[200==200]: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La première erreur provient de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ $coderetour == 200 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;J&amp;rsquo;ai utilisé simples crochets et mis des espaces ente $coderetour et 200.
Tandis que la deuxième est à cause de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [$coderetour==200]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ce qui n&amp;rsquo;obéit pas à la syntaxe du bash que la condition est toujours entourée d’un espace après le crochet d’ouverture et avant le crochet de fermeture.
J&amp;rsquo;ai aussi essayé de comprendre la différence entre simples et doubles crochets et j&amp;rsquo;ai trouvé une réponse raisonnable
Les conditions à doubles crochets permettent tout ce qu’offrent les conditions à simples crochets et plus, par exemple, elles proposent l’usage du wildcard comme en bash ainsi que des expressions régulières.&lt;/p&gt;

&lt;p&gt;Voici la dernière version de script accompagné des explications de certaines commandes bash dans les commentaire.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# !/bin/bash
# on commence par effacer l&#39;éventuel contenu de ficher que l&#39;on doit réécrire
echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
# ou
# rm -f &amp;quot;$2/tableau.html&amp;quot; ;
# on récupère les 2 arguments que l&#39;on a passé au programme
# le premier : chemin vers le dossier contenant les fichiers d&#39;URL
# le second : chemin vers le dossier devant contenir le fichier HTML final
echo &amp;quot;les urls sont dans : $1&amp;quot;;
echo &amp;quot;chemin de stockage : $2&amp;quot;;
# 1. définir le type &amp;lt;html&amp;gt;
echo &amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=\&amp;quot;UTF-8\&amp;quot;&amp;gt;&amp;lt;title&amp;gt;Tableaux&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;

# 2. générer un tableau par fichier d&#39;URL
numeroTable=1;
# pour tous les fichiers dans le répertoire 1
# for fichier in $1/*
for fichier in $(ls $1)
# on exécute les commandes suivantes
do
# compteur destiné à compter les URLs pour chaque fichier d&#39;URL
compteur=1;
echo &amp;quot;$1/$fichier&amp;quot;;
echo &amp;quot;&amp;lt;table border=\&amp;quot;2\&amp;quot; align=\&amp;quot;center\&amp;quot; width=\&amp;quot;80%\&amp;quot;&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
  # lecture ligne à ligne des URLs
  for ligne in $(cat &amp;quot;$1/$fichier&amp;quot;)
  do
  # curl ： un outil de transfert de data de ou vers un serveur
  # options :
  # -o output file
  # -s silent, use -S, --show-error in addition to this option to disable progress meter but still show error messages
  # -I head, fetch the headers only
  # -L location, if the server reports that the requested page has moved to a different location, this option will make curl redo the request on the new place.
  # -w write-out, Make curl display information on stdout after a completed transfer
  coderetour=$(curl -SIL -o tmp.txt -w %{http_code} $ligne);

  # si coderetour est egale a 200

  if [[ $coderetour == 200 ]]
    then
    # normaliser la case, tout est en majuscule, comme UTF-8
    # supprimer eventuellement la fin de ligne
    encodage=$(curl -sIL -o toto -w %{content_type} $ligne|cut -f2 -d&amp;quot;=&amp;quot;|tr &#39;[a-z]&#39; &#39;[A-Z]&#39;|tr -d &#39;\n&#39;);
    # quand on ouvre un fichier, le reprtoire sera le sien
    # pour relier $numeroTable et $compteur, &#39;-&#39; marche mais pas &#39;_&#39;?????
    curl -L -o &amp;quot;../PAGES-ASPIREES/$numeroTable-$compteur.html&amp;quot; &amp;quot;$ligne&amp;quot;;
    if [[ $encodage == &#39;UTF-8&#39; ]]
      then
      lynx -dump -nolist -assume-charset=$encodage - display-charset=$encodage &amp;quot;../PAGE_ASPIREES/$numeroTable-$compteur.html&amp;quot; &amp;gt; ../DUMP-TEXT/$numeroTable-$compteur.txt;

      echo &amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code_http:$coderetour&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGE-ASPIREES/$numeroTable-$compteur.html\&amp;quot;&amp;gt;$numeroTable-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/$numeroTable-$compteur.txt\&amp;quot;&amp;gt;$numeroTable-$compteur.txt&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
      else
      # comment savoir si la valeur est connu de iconv
      # extraction de l&#39;encodage avec egrep dans la page aspiree
      # lynx dump avec l&#39;encodage trouve
      # convertir le dump en utf8 avec iconv
      echo &amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code_http:$coderetour&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGE_ASPIREES/$numeroTable-$compteur.html\&amp;quot;&amp;gt;&amp;quot;$numeroTable-$compteur.html&amp;quot;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
      fi
    else
    echo &amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code_http:$coderetour&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
    fi
  compteur=$((compteur+1));
  done
echo &amp;quot;&amp;lt;/table&amp;gt;&amp;lt;br /&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
# cat $fichier &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;
numeroTable=$((numeroTable+1));
done
echo &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 7 - Rajouter 4 colonnes dans la table d&#39;URLs</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/5/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/5/</guid>
      <description>&lt;p&gt;Désormais, au moment de lancement de notre programme, nous devons mettre 3 arguments. Le premier et le deuxième sont respectivement le répertoire de l&amp;rsquo;input URL et celui de l&amp;rsquo;output tableau. Maintenant, le troisième est nos mots ciblés dans ce projet qui est donc &amp;lsquo;guerre commerciale|trade war|贸易战&amp;rsquo; pour nous. Ce troisième argument sert à compter sa fréquence dans le texte.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Les 4 colonnes rajoutées sont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le contexte de mot-clé&lt;/li&gt;
&lt;li&gt;sa fréquence dans chaque fichier dump&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;index des mots présents dans chaque fichier dump&lt;/li&gt;
&lt;li&gt;les bigrammes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Minigrep ou egrep&lt;/font&gt;&lt;/center&gt;&lt;/font&gt;&lt;/center&gt;&lt;br&gt;
&lt;font size=&#34;4&#34;&gt;&lt;font size=&#34;4&#34;&gt;Après avoir intallé Perl, nous avons deux façons de trouver le contexte des mots ciblés, soit deux lignes autour de la ligne concernant les mots-clés, une avec egrep et une autre avec minigrep&lt;/font&gt;&lt;/font&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ----06/11
# METHODE 1 : trouver la ligne avant et la ligne après de la ligne contenant notre mot-clé avec egrep
# egrep -i -C 2 $motif &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; &amp;gt; &#39;../CONTEXTES/$numerotableau-$compteur.txt&#39;;
# METHODE 2 : en utilisant minigrep
# mettre les motifs dans le fichier parametre-motif.txt
minigrep/minigrepmultilingue.pl &amp;quot;UTF-8&amp;quot; &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; minigrep/parametre-motif.txt;
# renommer le fichier obtenu
mv resultat-extraction.html ../CONTEXTES/$numerotableau-$compteur.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;font size=&#34;4&#34;&gt;Afin d&amp;rsquo;obtenir des bigrammes, nous avons concaténé tous les mots d&amp;rsquo;un fichier avec tous les mots de ce fichier sauf le premier en utilisant paste. Cependant, la manière dont on utilise pour récupérer des mots ne s&amp;rsquo;applique pas au chinois à cause du fait que le chinois n&amp;rsquo;utilise pas des délimiteurs pour distinguer des mots. Il nous faut donc trouver un autre outil pour la segmentation du corpus chinois. &lt;/font&gt;&lt;/font&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# \w+ ne marche que dans UTF-8
# INDEX DES MOTS
egrep -o &#39;\w+&#39; &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; | sort | uniq -c|sort -gr &amp;gt; &#39;../DUMP-TEXT/index-$numerotableau-$compteur.txt&#39;;
## BIGRAMS
egrep -o &#39;\w+&#39; &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; &amp;gt;fic1;
tail -n +2 fich1 &amp;gt;fic2;
paste fic1 fic2 | sort | uniq -c | sort -gr &amp;gt; &#39;../DUMP-TEXT/bigrams-$numerotableau-$compteur.txt&#39;
## COMPTER LE MOTIF
frqMotif=$(egrep -oc $motif &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;
&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;&lt;center&gt;&lt;font size=&#34;3&#34; color=&#34;blue&#34;&gt;Stanford Chinese Segmenter&lt;/font&gt;&lt;/center&gt;&lt;/font&gt;&lt;/center&gt;&lt;br&gt;
&lt;font size=&#34;4&#34;&gt;&lt;font size=&#34;4&#34;&gt;Grâce aux blogs de nos anciens camarades, nous avons connu un outil de segmentation du chinois à savoir Stanford Chinese Segmenter. En ce qui concerne l&amp;rsquo;usage de cet outil, tout est clair sur son site (&lt;a href=&#34;https://nlp.stanford.edu/software/segmenter.shtml)[https://nlp.stanford.edu/software/segmenter.shtml&#34;&gt;https://nlp.stanford.edu/software/segmenter.shtml)[https://nlp.stanford.edu/software/segmenter.shtml&lt;/a&gt;] &lt;/font&gt;&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh ./stanford-segmenter/segment.sh -k ctb ./DUMP-TEXT/*.txt utf-8 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 8 - Résolution du problème d&#39;encodage</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/6/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/6/</guid>
      <description>&lt;p&gt;&lt;font size=&#34;4&#34;&gt;Lors de la détection de l&amp;rsquo;encodage, pour quelques URLs chinois, nous avons détecté TEXT/HTML comme résultat, ce qui n&amp;rsquo;était pas un type d&amp;rsquo;encodage et évidemment ne pouvait pas être converti en UTF-8 avec iconv. Il nous faut donc reconstruire nos codes selon le processus ci-après :&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://xingyuliunlp.github.io/projet_encadre/blog/_index_files/encodage.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cours 9 - méthode 2 de de la segmentation du chinois</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/7/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/7/</guid>
      <description>&lt;p&gt;&lt;font size=&#34;4&#34;&gt;Pour la segmentation du corpus chinois, la semaine dernière, nous avons utilisé le stanford-segmenter. Ayant pour but de le comparer avec un module Jieba qui se concentre sur la segmentation du texte chinois, nous avons écrit un script python en important ce dernier module pour réaliser la segmentation. &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python
# _*_ coding: utf-8 _*_

# segment chinese text
# modules
import re
import sys
import jieba

# functions
def tokenize(file):
    # input file
    with open(file, &#39;r&#39;, encoding=&#39;utf-8&#39;) as f:
        content = f.read()
        # clean text and keep only chinese characters
        pattern=re.compile(u&#39;[^\u4E00-\u9FA5]&#39;)
        texte=pattern.sub(r&#39;&#39;, content)
        wordlist_temp=list(jieba.cut(texte, cut_all=False))
        wordlist=[i.rstrip() for i in wordlist_temp if len(i)&amp;gt;=1]
    return wordlist

def token_file(file):
    wordlist=tokenize(sys.argv[1])
    # output file
    with open(file, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:
        f.write(&#39; &#39;.join(wordlist))

if __name__ == &amp;quot;__main__&amp;quot;:
    token_file(sys.argv[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;font size=&#34;4&#34;&gt;&lt;font size=&#34;4&#34;&gt;Il suffit de taper le nom du fichier contenant des textes chinois comme le premier argument et le nom du fichier de sortie comme le deuxième argument.&lt;/font&gt;&lt;/font&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3.7 seg_jieba.py ../DUMP-TEXT/1-16.txt test1.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;font size=&#34;4&#34;&gt;&lt;font size=&#34;4&#34;&gt;Nous avons ensuite fait un test en prenant un de nos dump textes comme l&amp;rsquo;input avec les segmenteurs Jieba et Stanford-Segmenter. Les résultats sont affichés ci-après. Le résultat de Jieba s&amp;rsquo;affiche en haut tandis que celui de Stanford se trouve en bas. &lt;/font&gt;&lt;/font&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://xingyuliunlp.github.io/projet_encadre/blog/_index_files/screenshot_515.jpg&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cours 10 - Reconstruction du code (Refactoring)</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/8/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/8/</guid>
      <description>&lt;p&gt;&lt;font size=&#34;4&#34;&gt;&lt;font size=&#34;4&#34;&gt;Pour que notre script final soit plus lisible et claire, nous essayons de remanier notre code en mettant chaque processus dans une fonction. Grâce au &lt;a href=&#34;https://projettal.wordpress.com/2018/11/12/journal-de-travail-seance-2018-11-07-lt/&#34;&gt;blog d&amp;rsquo;un ancien camarade&lt;/a&gt;, un exemple auquel on peut faire référence, nous avons pu comprendre le foctionnement des fonctions en bash dans un cas précis et concret. Voici le script principal. &lt;/font&gt;&lt;/font&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# importer les fonctions
. /Users/becca/Documents/nlp/coursS1/projetEncadre/PROJET-MOT-SUR-LE-WEB/PROGRAMMES/functions.sh
#--------------------Main part-----------------#
# on commence par supprimer l&#39;éventuel fichier de résultat que l&#39;on doit reconstruire
rm -f &amp;quot;$2/tableau2.html&amp;quot; ;
# on récupère les 2 arguments que l&#39;on a passé au programme
# le premier : chemin vers le dossier contenant les fichiers d&#39;URL
# le second : chemin vers le dossier devant contenir le fichier HTML final
echo &amp;quot;Les urls SONT DANS  : $1&amp;quot; ;
echo &amp;quot;On créé le tableau HTML dans : $2&amp;quot; ;
# output=$($2/tableau2.html)
ecrireMetaData $2/tableau2.html
# Création d&#39;une variable pour compter les fichiers traités et donc le nb de tableau généré
numerotableau=1;
# Création d&#39;une variable pour stocker notre terme ciblé
motif=$3;

# Parcours du dossier contenant les fichiers URLs
for fichier in $(ls $1)
do
compteur=1; # compteur destiné à compter les URLs pour chaque fichier d&#39;URL
echo &amp;quot;$1/$fichier&amp;quot; ;
#-----------------------------------------------------------
# Création du tableau associé au fichier en cours de traitement
#-----------------------------------------------------------
ecrireTitre $2/tableau2.html
# &amp;quot;parcours&amp;quot; d&#39;un fichier d&#39;URL : lecture ligne à ligne des URLs
for ligne in $(cat &amp;quot;$1/$fichier&amp;quot;)
  do
  codeRetour=$(detHttpCode $ligne);
  if [[ $codeRetour == 200 ]]
    then
    encodage=$(detEncodage1 $ligne);
    curl -L -o &amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html&amp;quot; &amp;quot;$ligne&amp;quot;;
    echo &amp;quot;ENCODAGE DETECTE PAR CURL : $encodage&amp;quot;;
    if [[ $encodage == &amp;quot;UTF-8&amp;quot; ]]
      then
      procUtf8 $2/tableau2.html
    else # http_code=200, l&#39;encodage n&#39;est pas utf-8
      encodage=$(detEncodage2 $ligne)
      if [[ $encodage == &amp;quot;UTF-8&amp;quot; ]]
        then
        procUtf8 $2/tableau2.html
      else
        code=$(iconv -l|egrep -i $encodage)
        if [[ $code=true ]]
          then
          iconv -f $encodage -t &#39;utf-8&#39; ../DUMP-TEXT/$numerotableau-$compteur.txt &amp;gt; ../DUMP-TEXT/$numerotableau-$compteur-converti.txt
        else
          procVide $2/tableau2.html
        fi
      fi
    fi
  else
    procVide $2/tableau2.html
  fi
  compteur=$((compteur+1)) ;
done
echo &amp;quot;&amp;lt;/table&amp;gt;&amp;lt;br /&amp;gt;&amp;quot; &amp;gt;&amp;gt; $2/tableau2.html ;
# on incrémente le compteur de tableaux
numerotableau=$((numerotableau+1));
done
echo &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; &amp;gt;&amp;gt; $2/tableau2.html ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## functions
# 1 html head
ecrireMetaData(){
  echo &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot; &amp;gt; $1
  echo &amp;quot;&amp;lt;html lang=\&amp;quot;en\&amp;quot;&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
  echo &amp;quot;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;title&amp;gt;Projet Encadre&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
  echo &amp;quot;&amp;lt;body&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
 }
# 2 table title
ecrireTitre(){
  echo &amp;quot;&amp;lt;table border=\&amp;quot;2\&amp;quot; align=\&amp;quot;center\&amp;quot; width=\&amp;quot;80%\&amp;quot;&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
  echo &amp;quot;&amp;lt;tr bgcolor=\&amp;quot;grey\&amp;quot;&amp;gt;&amp;lt;td&amp;gt;N°&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;URL&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code http&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;encodage&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Page aspirée&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Dump&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Filtrage Txt&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Filtrage Html&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Index&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Bitexte&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Fq Motif&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
}
# 3 get http_code
detHttpCode(){
  curl -SIL -o toto -w &amp;quot;%{http_code}&amp;quot; $1
}
# 4 two ways to get encoding
detEncodage1(){
  curl -sIL -o toto  -w %{content_type} $1 | cut -f2 -d&amp;quot;=&amp;quot; | tr &#39;[a-z]&#39; &#39;[A-Z]&#39; | tr -d &#39;\r&#39;
}
detEncodage2(){
  egrep -oi &#39;charset=&amp;quot;?[^&amp;quot;,]+&amp;quot;?&#39; $1 | cut -f2 -d&amp;quot;=&amp;quot; | tr &#39;[a-z]&#39; &#39;[A-Z]&#39; | tr -d &#39;\r&#39;| head -1
}

# 5 process text when encoding is utf-8
procUtf8(){
  # 1. On lynx la page aspirée
	lynx -dump -nolist -assume_charset=$encodage -display_charset=$encodage &amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html&amp;quot; &amp;gt; ../DUMP-TEXT/$numerotableau-$compteur.txt;
	#-----------------------------------------------------------
	# 2. On cree le fichier contexte TXT via egrep
  egrep -i -C2 &amp;quot;$motif&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt &amp;gt; ../CONTEXTE/$numerotableau-$compteur.txt;
  #-----------------------------------------------------------
	# 3. Fq motif
	nbmotif=$(egrep -coi &amp;quot;$motif&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt;);
	#-----------------------------------------------------------
	# 4. contexte html
	../minigrep/minigrepmultilingue.pl &amp;quot;utf-8&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt ../minigrep/motif-regexp.txt ;
  mv resultat-extraction.html ../CONTEXTES/$numerotableau-$compteur.html ;
	#-----------------------------------------------------------
	# 5. index hierarchique
	egrep -o &amp;quot;\w+&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt | sort | uniq -c | sort -r &amp;gt; ../DUMP-TEXT/index-$numerotableau-$compteur.txt ;
	#-----------------------------------------------------------
	# 6. bigramme
	egrep -o &amp;quot;\w+&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt &amp;gt; bi1.txt;
	tail -n +2 bi1.txt &amp;gt; bi2.txt ;
	paste bi1.txt bi2.txt &amp;gt; bi3.txt ;
	cat bi3.txt | sort | uniq -c | sort -r &amp;gt;  ../DUMP-TEXT/bigramme-$numerotableau-$compteur.txt ;
	#-----------------------------------------------------------
	# 7. on écrit les résultats dans le tableau avec tous les résultats produits
  echo &amp;quot;&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Code_http:$codeRetour&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html\&amp;quot;&amp;gt;$numerotableau-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/$numerotableau-$compteur.txt\&amp;quot;&amp;gt;$numerotableau-$compteur.txt&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../CONTEXTES/$numerotableau-$compteur.txt\&amp;quot;&amp;gt;$numerotableau-$compteur.txt&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../CONTEXTES/$numerotableau-$compteur.html\&amp;quot;&amp;gt;$numerotableau-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/index-$numerotableau-$compteur.txt\&amp;quot;&amp;gt;index-$numerotableau-$compteur&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/bigramme-$numerotableau-$compteur.txt\&amp;quot;&amp;gt;bigramme-$numerotableau-$compteur&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;$nbmotif&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$1&amp;quot;
}
# 6 write &amp;quot;-&amp;quot; in table
procVide(){
  echo &amp;quot;&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Code_http:$codeRetour&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html\&amp;quot;&amp;gt;$numerotableau-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 11 - Analyse du corpus sur iTrameur</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/blog/9/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/blog/9/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Academic</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/hero/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/hero/</guid>
      <description>&lt;p&gt;&lt;strong&gt;The Best Way to Create the Website You Want from Markdown (or Jupyter/RStudio)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Build &lt;strong&gt;Anything&lt;/strong&gt; with Widgets&lt;/p&gt;

&lt;!-- &lt;span style=&#34;text-shadow: none;&#34;&gt;&lt;a class=&#34;github-button&#34; href=&#34;https://github.com/gcushen/hugo-academic&#34; data-icon=&#34;octicon-star&#34; data-size=&#34;large&#34; data-show-count=&#34;true&#34; aria-label=&#34;Star this on GitHub&#34;&gt;Star&lt;/a&gt;&lt;script async defer src=&#34;https://buttons.github.io/buttons.js&#34;&gt;&lt;/script&gt;&lt;/span&gt; --&gt;
</description>
    </item>
    
    <item>
      <title>Demos</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/demo/</guid>
      <description>&lt;p&gt;Welcome to the &lt;strong&gt;personal demo&lt;/strong&gt; of Academic. Other demos available include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34;&gt;&lt;strong&gt;Project Demo&lt;/strong&gt; (Academic&amp;rsquo;s actual site)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Over 100,000 &lt;a href=&#34;https://sourcethemes.com/academic/#expo&#34;&gt;Amazing Websites&lt;/a&gt; have Already Been Built with Academic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/&#34;&gt;Join&lt;/a&gt; the Most Empowered Hugo Community&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;This homepage section is an example of adding &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;elements&lt;/a&gt; to the &lt;a href=&#34;https://sourcethemes.com/academic/docs/widgets/&#34;&gt;&lt;em&gt;Blank&lt;/em&gt; widget&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Backgrounds can be applied to any section. Here, the &lt;em&gt;background&lt;/em&gt; option is set give an &lt;em&gt;image parallax&lt;/em&gt; effect.&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Accomplish&amp;shy;ments</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/accomplishments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/accomplishments/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/projects/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Meet the Team</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/people/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/people/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Recent &amp; Upcoming Talks</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/talks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Recent Publications</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/backup/publications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/backup/publications/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Quickly discover relevant content by &lt;a href=&#34;https://xingyuliunlp.github.io/projet_encadre/publication/&#34;&gt;filtering publications&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/talk/example/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/talk/example/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Academic&amp;rsquo;s &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Further talk details can easily be added to this page using &lt;em&gt;Markdown&lt;/em&gt; and $\rm \LaTeX$ math code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nous nous sommes penchés sur la représentation de la guerre commerciale sur la toile des pays anglophones, de la Chine, et de la France.</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/publication/conference-paper/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/publication/conference-paper/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Writing technical content in Academic</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/post/writing-technical-content/</guid>
      <description>

&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;p&gt;$$\gamma&lt;em&gt;{n} = \frac{ \left | \left (\mathbf x&lt;/em&gt;{n} - \mathbf x&lt;em&gt;{n-1} \right )^T \left [\nabla F (\mathbf x&lt;/em&gt;{n}) - \nabla F (\mathbf x&lt;em&gt;{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}&lt;/em&gt;{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\&lt;/code&gt; math linebreak:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;$$f(k;p_0^*) = \begin{cases} p_0^* &amp;amp; \text{if }k=1, \\
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;p&gt;$$f(k;p_0^&lt;em&gt;) = \begin{cases} p_0^&lt;/em&gt; &amp;amp; \text{if }k=1, &lt;br /&gt;
1-p_0^* &amp;amp; \text {if }k=0.\end{cases}$$&lt;/p&gt;

&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;

&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;

&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;

&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Write math example&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; Write diagram example&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Do something else&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;

&lt;p&gt;Represent your data in tables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;asides&#34;&gt;Asides&lt;/h3&gt;

&lt;p&gt;Academic supports a &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#alerts&#34;&gt;shortcode for asides&lt;/a&gt;, also referred to as &lt;em&gt;notices&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% alert note %}} ... {{% /alert %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% alert note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /alert %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;renders as&lt;/p&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/post/jupyter/</guid>
      <description>

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;

&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;

&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;

&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;

&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the metadata of your post, using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;

&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;

&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/slides/example/</guid>
      <description>

&lt;h1 id=&#34;create-slides-in-markdown-with-academic&#34;&gt;Create slides in Markdown with Academic&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34;&gt;Academic&lt;/a&gt; | &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://spectrum.chat/academic&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#create-slides&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>External Project</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/project/external-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/project/external-project/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Internal Project</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/project/internal-project/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/project/internal-project/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Academic: the website builder for Hugo</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/post/getting-started/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/post/getting-started/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Create a free website with Academic using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 &lt;em&gt;widgets&lt;/em&gt;, &lt;em&gt;themes&lt;/em&gt;, and &lt;em&gt;language packs&lt;/em&gt; included!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://sourcethemes.com/academic/#expo&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href=&#34;#install&#34;&gt;&lt;strong&gt;Get Started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📚 &lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34;&gt;View the &lt;strong&gt;documentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💬 &lt;a href=&#34;https://discourse.gohugo.io&#34;&gt;&lt;strong&gt;Ask a question&lt;/strong&gt; on the forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;👥 &lt;a href=&#34;https://spectrum.chat/academic&#34;&gt;Chat with the &lt;strong&gt;community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href=&#34;https://twitter.com/source_themes&#34;&gt;@source_themes&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeorgeCushen&#34;&gt;@GeorgeCushen&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%23MadeWithAcademic&amp;amp;src=typd&#34;&gt;#MadeWithAcademic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💡 &lt;a href=&#34;https://github.com/gcushen/hugo-academic/issues&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⬆️ &lt;strong&gt;Updating?&lt;/strong&gt; View the &lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34;&gt;Update Guide&lt;/a&gt; and &lt;a href=&#34;https://sourcethemes.com/academic/updates/&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;❤ &lt;strong&gt;Support development&lt;/strong&gt; of Academic:

&lt;ul&gt;
&lt;li&gt;☕️ &lt;a href=&#34;https://paypal.me/cushen&#34;&gt;&lt;strong&gt;Donate a coffee&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💵 &lt;a href=&#34;https://www.patreon.com/cushen&#34;&gt;Become a backer on &lt;strong&gt;Patreon&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🖼️ &lt;a href=&#34;https://www.redbubble.com/people/neutreno/works/34387919-academic&#34;&gt;Decorate your laptop or journal with an Academic &lt;strong&gt;sticker&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;👕 &lt;a href=&#34;https://academic.threadless.com/&#34;&gt;Wear the &lt;strong&gt;T-shirt&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;👩‍💻 &lt;a href=&#34;https://sourcethemes.com/academic/docs/contribute/&#34;&gt;&lt;strong&gt;Contribute&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;














&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; data-caption=&#34;Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34;&gt;
&lt;img data-src=&#34;https://raw.githubusercontent.com/gcushen/hugo-academic/master/academic.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Academic is mobile first with a responsive design to ensure that your site looks stunning on every device.
  &lt;/figcaption&gt;


&lt;/figure&gt;


&lt;p&gt;&lt;strong&gt;Key features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://sourcethemes.com/academic/docs/jupyter/&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 15+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;p&gt;Academic comes with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can  choose their preferred mode - click the sun/moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully &lt;a href=&#34;https://sourcethemes.com/academic/docs/customization/#custom-theme&#34;&gt;customizable&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-admin&#34;&gt;Academic Admin&lt;/a&gt;:&lt;/strong&gt; An admin tool to import publications from BibTeX or import assets for an offline site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/sourcethemes/academic-scripts&#34;&gt;Academic Scripts&lt;/a&gt;:&lt;/strong&gt; Scripts to help migrate content to new versions of Academic&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;You can choose from one of the following four methods to install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-web-browser&#34;&gt;&lt;strong&gt;one-click install using your web browser (recommended)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-git&#34;&gt;install on your computer using &lt;strong&gt;Git&lt;/strong&gt; with the Command Prompt/Terminal app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-zip&#34;&gt;install on your computer by downloading the &lt;strong&gt;ZIP files&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/install/#install-with-rstudio&#34;&gt;install on your computer with &lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then &lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34;&gt;personalize and deploy your new site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;updating&#34;&gt;Updating&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/update/&#34;&gt;View the Update Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to &lt;em&gt;star&lt;/em&gt; the project on &lt;a href=&#34;https://github.com/gcushen/hugo-academic/&#34;&gt;Github&lt;/a&gt; to help keep track of &lt;a href=&#34;https://sourcethemes.com/academic/updates&#34;&gt;updates&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/gcushen/hugo-academic/blob/master/LICENSE.md&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://xingyuliunlp.github.io/projet_encadre/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>https://xingyuliunlp.github.io/projet_encadre/post/2015-07-23-r-rmarkdown/</guid>
      <description>


&lt;p&gt;&lt;h2&gt;Table des matières&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB
&lt;/p&gt;
&lt;div id=&#34;r-markdown&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Markdown&lt;/h2&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Including Plots&lt;/h2&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://xingyuliunlp.github.io/projet_encadre/projet_encadre/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
