<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guerre Commerciale</title>
    <link>/projet_encadre/</link>
      <atom:link href="/projet_encadre/index.xml" rel="self" type="application/rss+xml" />
    <description>Guerre Commerciale</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>fr</language><copyright>Xiaoou WANG&amp;Xingyu LIU©2020</copyright><lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0100</lastBuildDate>
    <image>
      <url>/projet_encadre/img/icon-192.png</url>
      <title>Guerre Commerciale</title>
      <link>/projet_encadre/</link>
    </image>
    
    <item>
      <title>Cours 2 - Préambule Unix I</title>
      <link>/projet_encadre/blog/1/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0200</pubDate>
      <guid>/projet_encadre/blog/1/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;h2 id=&#34;système-de-fichiers&#34;&gt;Système de fichiers&lt;/h2&gt;

&lt;p&gt;Sous windows, il y a plusieurs arborescences tandis que sous unix, on a qu’une arborescence.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# print repertoire actuel
pwd
# remonte au repertoire parent
cd .. 
# aller a la racine
cd / 
echo &amp;quot;# exemple de l&#39;arborescence de la racine sous Mac&amp;quot;
# exemple de l&#39;arborescence de la racine sous Mac
ls 
# aller a home
cd ~ 
echo &amp;quot;# sortie de la commande cat&amp;quot;
echo &amp;quot;Bonjour&amp;quot; &amp;gt; test.txt
# visualiser le contenu d&#39;un fichier
cat test.txt 
echo &amp;quot;# montrer les metadonnes du contenu&amp;quot;
# la commande egale wc -mlw, m = caractere l = ligne, w = mots
wc test.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;/Users/becca/Downloads/siteProjetEncadre/content/blog
# exemple de l&#39;arborescence de la racine sous Mac
Applications
Developer
Incompatible Software
Library
Network
System
Users
Volumes
anaconda3
bin
cores
dev
etc
home
installer.failurerequests
net
opt
private
sbin
tmp
usr
var
# sortie de la commande cat
Bonjour
# montrer les metadonnes du contenu
       1       1       8 test.txt
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 3 - Préambule Unix II</title>
      <link>/projet_encadre/blog/2/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0200</pubDate>
      <guid>/projet_encadre/blog/2/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;h2 id=&#34;flux-d-entrée-de-sortie-d-erreur&#34;&gt;Flux d&amp;rsquo;entrée &amp;amp; de sortie &amp;amp; d&amp;rsquo;erreur&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# flux d’erreur standard &amp;quot;&amp;gt;&amp;gt;&amp;quot; (sortie normal) vs. 2&amp;gt; (canal d’erreur)
cd ~
lsd &amp;gt; sortie.txt 2&amp;gt; erreur.txt
# exercice : transformer tous les n en N d&#39;un fichier et l&#39;enregistrer dans un autre fichier
tr &amp;quot;n&amp;quot; &amp;quot;N&amp;quot; &amp;lt; test.txt &amp;gt; testN.txt
cat testN.txt
# Exercice : majusculiser les données
tr &amp;quot;[[:lower:]]&amp;quot; &amp;quot;[[:upper:]]&amp;quot; &amp;lt; test.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BoNjour
BONJOUR
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;redirection-du-flux-d-information&#34;&gt;Redirection du flux d’information&lt;/h2&gt;

&lt;p&gt;Récupérer l’output de la première commande et le réenvoyer à la deuxième commande - symbole clé : pipe |&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# transformer &amp;quot;é&amp;quot; en &amp;quot;E&amp;quot; puis majusculiser l&#39;output de la première commande
cd ~
tr &amp;quot;é&amp;quot; &amp;quot;E&amp;quot; &amp;lt; test.txt | tr &amp;quot;[[:lower:]]&amp;quot; &amp;quot;[[:upper:]]&amp;quot;
# trier par le premier champ - sort ; filtrage de doublons - uniq
egrep -o &amp;quot;\w+&amp;quot; test.txt | sort | uniq -c
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;BONJOUR
   1 Bonjour
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sectionner-les-données-par-champ&#34;&gt;Sectionner les données par champ&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# couper les données en 2 champs par le délimiteur &amp;quot;=&amp;quot;
cd ~
echo &amp;quot;la somme de 2+2=4&amp;quot; &amp;gt; test2.txt
cut -f2 -d&amp;quot;=&amp;quot; test2.txt
# utiliser read pour capturer la saisie de l&#39;utilisateur et la stocker dans une variable
echo &amp;quot;nom ?&amp;quot; ;
# read nom;
echo &amp;quot;bonjour $nom&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;4
nom ?
bonjour 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 4 - Préparation du projet</title>
      <link>/projet_encadre/blog/3/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0200</pubDate>
      <guid>/projet_encadre/blog/3/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;h2 id=&#34;configuration-du-terrain&#34;&gt;Configuration du terrain&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nous avons créé l&amp;rsquo;arborescence de travail à l&amp;rsquo;aide du script bash suivant nommé &lt;code&gt;prepare-environnement-projet.sh&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
mkdir PROJET_MOT_SUR_LE_WEB
cd PROJET_MOT_SUR_LE_WEB
# on peut désormais créer l&#39;arborescence de travail
mkdir ./CONTEXTES;
mkdir ./DUMP_TEXT;
mkdir ./IMAGES;
mkdir ./PAGES_ASPIREES;
mkdir ./PROGRAMMES;
mkdir ./TABLEAUX;
mkdir ./URLS;
# les lignes précédentes peuvent tenir sur une seule ligne
# à savoir mkdir ./CONTEXTES ./DUMP_TEXT etc....
# le dossier URLS contiendra le fichier initial d&#39;URLs
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Il suffit de nous positionner dans le même répertoire que ce script et l&amp;rsquo;exécuter avec bash&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash prepare-environnement-projet.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;lecture-des-fichiers-url-et-écriture-de-leurs-contenus-dans-un-nouveau-fichier&#34;&gt;Lecture des fichiers URL et écriture de leurs contenus dans un nouveau fichier&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;J&amp;rsquo;ai une remarque sur la manière de récupérer tous les fichiers dans un répertoire. J&amp;rsquo;ai utilisé /chemin/* au lieu de $(ls /chemin) car ce dernier m&amp;rsquo;apparaît un peu lourd mais je vois pas leur différence au niveau de sortie&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# !/bin/bash
# on commence par effacer l&#39;éventuel contenu de ficher que l&#39;on doit réécrire
echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
# on récupère les 2 arguments que l&#39;on a passé au programme
# le premier : chemin vers le dossier contenant les fichiers d&#39;URL
# le second : chemin vers le dossier devant contenir le fichier HTML final
echo &amp;quot;les urls sont dans : $1&amp;quot;;
echo &amp;quot;chemin de stockage : $2&amp;quot;;
# pour tous les fichiers dans le répertoire 1
for fichier in $1/*
# on exécute les commandes suivantes
do
# compteur destiné à compter les URLs pour chaque fichier d&#39;URL
compteur=1;
echo &amp;quot;$fichier&amp;quot;;
  for ligne in $(cat &amp;quot;$fichier&amp;quot;)
  do
  echo &amp;quot;$compteur : $ligne&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
  # on incrémente le compteur des URLs
  compteur=$((compteur+1))
  done
done
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 6 - Détection de l’encodage d’URL</title>
      <link>/projet_encadre/blog/4/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0200</pubDate>
      <guid>/projet_encadre/blog/4/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;h2 id=&#34;récapitulatif-des-trois-dernières-séances&#34;&gt;Récapitulatif des trois dernières séances&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nous avons établi d’abord des tables de base contenant des URLs à l’aide de deux boucles for, dont l&amp;rsquo;une pour parcourir tous nos fichiers d’URLs et construire une table pour chaque fichier, soit chaque langue et la deuxième servant à lire les URLs et les écrire dans nos tables ligne à ligne. Nous avons appris que le shell utilise des variables d’environnement dont l’on peut faire apparaître le contenu avec le signe dollar “$”. En utilisant ce signe, nous pouvons stocker et réutiliser le numéro de ligne et le contenu correspondant.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ayant pour but d&amp;rsquo;aspirer le contenu de page web et d&amp;rsquo;en faire des analyses textuelles, nous avons utilisé les commandes curl et lynx. Deux nouvelles colonnes ont été rajoutées pour enregistrer les liens locaux de fichier html et txt dirigés vers le contenu sans format et celui de texte brut de page web.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ce processus n&amp;rsquo;est pas automatique à cause des problèmes d’URLs ou de l’encodage. Pour pallier ces problèmes, nous avons détecté si le code de réponse est 200 qui veut dire requête réussie et si l’encodage est UTF-8. Les traitements ultérieurs dépendent des résultats de ces vérifications. Ces deux informations ont également été rajoutées dans nos tables.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/projet_encadre/projet_encadre/blog/table.jpg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;problèmes-rencontrés&#34;&gt;Problèmes rencontrés&lt;/h2&gt;

&lt;p&gt;Nous n’avons pas pris conscience de l’influence d’espace dans le script bash jusqu’au moment de l’apparition des erreurs suivantes :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[200: command not found # ou [405: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[200==200]: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;La première erreur&lt;/strong&gt; provient de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ $coderetour == 200 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons utilisé les crochets simples et mis des espaces ente $coderetour et 200.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;La deuxième erreur&lt;/strong&gt; est à cause de&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [$coderetour==200]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ce qui n&amp;rsquo;obéit pas à la syntaxe du bash dans laquelle la condition est toujours entourée d’un espace après le crochet d’ouverture et avant le crochet de fermeture.&lt;/p&gt;

&lt;p&gt;Nous avons aussi essayé de comprendre la différence entre les crochets simples et doubles.&lt;/p&gt;

&lt;p&gt;Les conditions à crochets doubles permettent tout ce qu’offrent les conditions à crochets simples. En outre, elles acceptent l’usage du wildcard comme en bash ainsi que des expressions régulières.&lt;/p&gt;

&lt;p&gt;Voici la dernière version de script accompagnée des explications de certaines commandes bash dans les commentaires.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# !/bin/bash
# on commence par effacer l&#39;éventuel contenu de ficher que l&#39;on doit réécrire
echo &amp;quot;&amp;quot; &amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
# ou
# rm -f &amp;quot;$2/tableau.html&amp;quot; ;
# on récupère les 2 arguments que l&#39;on a passés au programme
# le premier : chemin vers le dossier contenant les fichiers d&#39;URL
# le second : chemin vers le dossier devant contenir le fichier HTML final
echo &amp;quot;les urls sont dans : $1&amp;quot;;
echo &amp;quot;chemin de stockage : $2&amp;quot;;
# 1. définir le type &amp;lt;html&amp;gt;
echo &amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=\&amp;quot;UTF-8\&amp;quot;&amp;gt;&amp;lt;title&amp;gt;Tableaux&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;

# 2. générer un tableau par fichier d&#39;URL
numeroTable=1;
# pour tous les fichiers dans le répertoire 1
# for fichier in $1/*
for fichier in $(ls $1)
# on exécute les commandes suivantes
do
# compteur destiné à compter les URLs pour chaque fichier d&#39;URL
compteur=1;
echo &amp;quot;$1/$fichier&amp;quot;;
echo &amp;quot;&amp;lt;table border=\&amp;quot;2\&amp;quot; align=\&amp;quot;center\&amp;quot; width=\&amp;quot;80%\&amp;quot;&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
  # lecture ligne à ligne des URLs
  for ligne in $(cat &amp;quot;$1/$fichier&amp;quot;)
  do
  # curl ： un outil de transfert de data de ou vers un serveur
  # options :
  # -o output file
  # -s silent, use -S, --show-error in addition to this option to disable progress meter but still show error messages
  # -I head, fetch the headers only
  # -L location, if the server reports that the requested page has moved to a different location, this option will make curl redo the request on the new place.
  # -w write-out, Make curl display information on stdout after a completed transfer
  coderetour=$(curl -SIL -o tmp.txt -w %{http_code} $ligne);

  # si coderetour égal à 200

  if [[ $coderetour == 200 ]]
    then
    # normaliser la case, tout est en majuscule, comme UTF-8
    # supprimer eventuellement la fin de ligne
    encodage=$(curl -sIL -o toto -w %{content_type} $ligne|cut -f2 -d&amp;quot;=&amp;quot;|tr &#39;[a-z]&#39; &#39;[A-Z]&#39;|tr -d &#39;\n&#39;);
    # quand on ouvre un fichier, le reprtoire sera le sien
    # pour relier $numeroTable et $compteur, &#39;-&#39; marche mais pas &#39;_&#39;?????
    curl -L -o &amp;quot;../PAGES-ASPIREES/$numeroTable-$compteur.html&amp;quot; &amp;quot;$ligne&amp;quot;;
    if [[ $encodage == &#39;UTF-8&#39; ]]
      then
      lynx -dump -nolist -assume-charset=$encodage - display-charset=$encodage &amp;quot;../PAGE_ASPIREES/$numeroTable-$compteur.html&amp;quot; &amp;gt; ../DUMP-TEXT/$numeroTable-$compteur.txt;

      echo &amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code_http:$coderetour&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGE-ASPIREES/$numeroTable-$compteur.html\&amp;quot;&amp;gt;$numeroTable-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/$numeroTable-$compteur.txt\&amp;quot;&amp;gt;$numeroTable-$compteur.txt&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
      else
      # comment savoir si la valeur est connu de iconv
      # extraction de l&#39;encodage avec egrep dans la page aspiree
      # lynx dump avec l&#39;encodage trouve
      # convertir le dump en utf8 avec iconv
      echo &amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code_http:$coderetour&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGE_ASPIREES/$numeroTable-$compteur.html\&amp;quot;&amp;gt;&amp;quot;$numeroTable-$compteur.html&amp;quot;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
      fi
    else
    echo &amp;quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code_http:$coderetour&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
    fi
  compteur=$((compteur+1));
  done
echo &amp;quot;&amp;lt;/table&amp;gt;&amp;lt;br /&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
# cat $fichier &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;
numeroTable=$((numeroTable+1));
done
echo &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$2/tableau.html&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 7 - Rajouter 4 colonnes dans la table d&#39;URLs</title>
      <link>/projet_encadre/blog/5/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>/projet_encadre/blog/5/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;h2 id=&#34;arguments&#34;&gt;Arguments&lt;/h2&gt;

&lt;p&gt;Désormais, au moment du lancement de notre programme, 3 arguments sont requis. Le premier et le deuxième sont le répertoire de l&amp;rsquo;input URL et celui de l&amp;rsquo;output tableau. Le troisième est nos mots ciblés dans notre projet qui est donc &amp;lsquo;guerre commerciale|trade war|贸易战&amp;rsquo;. Ce troisième argument sert à compter sa fréquence dans le texte.&lt;/p&gt;

&lt;h2 id=&#34;colonnes-rajoutées&#34;&gt;Colonnes rajoutées&lt;/h2&gt;

&lt;p&gt;Les 4 colonnes rajoutées sont :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;le contexte de mot-clé&lt;/li&gt;
&lt;li&gt;sa fréquence dans chaque fichier dump&lt;/li&gt;
&lt;li&gt;l&amp;rsquo;index des mots présents dans chaque fichier dump&lt;/li&gt;
&lt;li&gt;les bigrammes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;minigrep-ou-egrep&#34;&gt;Minigrep ou egrep&lt;/h2&gt;

&lt;p&gt;Après avoir intallé Perl, nous avons deux façons de trouver le contexte des mots ciblés, soit deux lignes autour de la ligne concernant les mots-clés, une avec egrep et une autre avec minigrep&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ----06/11
# METHODE 1 : trouver la ligne avant et la ligne après de la ligne contenant notre mot-clé avec egrep
# egrep -i -C 2 $motif &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; &amp;gt; &#39;../CONTEXTES/$numerotableau-$compteur.txt&#39;;
# METHODE 2 : en utilisant minigrep
# mettre les motifs dans le fichier parametre-motif.txt
minigrep/minigrepmultilingue.pl &amp;quot;UTF-8&amp;quot; &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; minigrep/parametre-motif.txt;
# renommer le fichier obtenu
mv resultat-extraction.html ../CONTEXTES/$numerotableau-$compteur.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afin d&amp;rsquo;obtenir des bigrammes, nous avons concaténé tous les mots d&amp;rsquo;un fichier avec tous les mots du même fichier excepté le premier en utilisant paste. Cependant, cette manière de récupérer des mots ne s&amp;rsquo;applique pas au chinois à cause du fait que le chinois n&amp;rsquo;utilise pas des délimiteurs pour distinguer des mots. Il nous faut donc trouver un autre outil pour la segmentation du corpus chinois.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# \w+ ne marche que dans UTF-8
# INDEX DES MOTS
egrep -o &#39;\w+&#39; &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; | sort | uniq -c|sort -gr &amp;gt; &#39;../DUMP-TEXT/index-$numerotableau-$compteur.txt&#39;;
## BIGRAMS
egrep -o &#39;\w+&#39; &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39; &amp;gt;fic1;
tail -n +2 fich1 &amp;gt;fic2;
paste fic1 fic2 | sort | uniq -c | sort -gr &amp;gt; &#39;../DUMP-TEXT/bigrams-$numerotableau-$compteur.txt&#39;
## COMPTER LE MOTIF
frqMotif=$(egrep -oc $motif &#39;../DUMP-TEXT/$numerotableau-$compteur.txt&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;solution-pour-la-segmentation-du-corpus-chinois&#34;&gt;Solution pour la segmentation du corpus chinois&lt;/h2&gt;

&lt;p&gt;Grâce aux blogs de nos anciens camarades, nous avons pris connaissance d&amp;rsquo;un outil de segmentation du chinois appelé Stanford Chinese Segmenter. &lt;a href=&#34;https://nlp.stanford.edu/software/segmenter.shtml&#34;&gt;Le site officiel&lt;/a&gt; offre des explications très détaillées sur l&amp;rsquo;usage de cet outil.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh ./stanford-segmenter/segment.sh -k ctb ./DUMP-TEXT/*.txt utf-8 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cours 8 - Résolution du problème d&#39;encodage</title>
      <link>/projet_encadre/blog/6/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>/projet_encadre/blog/6/</guid>
      <description>&lt;p&gt;Lors de la détection de l&amp;rsquo;encodage, pour quelques pages chinois, nous avons eu TEXT/HTML comme retour qui n&amp;rsquo;indique aucun encodage et par conséquent rend difficile la conversion en UTF-8 avec iconv. Il nous faut donc reconstruire nos codes selon le processus ci-après :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/projet_encadre/projet_encadre/blog/encodage.png&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cours 9 - méthode 2 de de la segmentation du chinois</title>
      <link>/projet_encadre/blog/7/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0100</pubDate>
      <guid>/projet_encadre/blog/7/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;h2 id=&#34;segmentation-du-corpus-chinois&#34;&gt;Segmentation du corpus chinois&lt;/h2&gt;

&lt;p&gt;Pour la segmentation du corpus chinois, nous avions précédemment utilisé le stanford-segmenter. Pour comparer sa performance avec un module Python Jieba spécialisé dans la segmentation du texte chinois, nous avons écrit un script python en important ce dernier module.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python
# _*_ coding: utf-8 _*_

# segment chinese text
# modules
import re
import sys
import jieba

# functions
def tokenize(file):
    # input file
    with open(file, &#39;r&#39;, encoding=&#39;utf-8&#39;) as f:
        content = f.read()
        # clean text and keep only chinese characters
        pattern=re.compile(u&#39;[^\u4E00-\u9FA5]&#39;)
        texte=pattern.sub(r&#39;&#39;, content)
        wordlist_temp=list(jieba.cut(texte, cut_all=False))
        wordlist=[i.rstrip() for i in wordlist_temp if len(i)&amp;gt;=1]
    return wordlist

def token_file(file):
    wordlist=tokenize(sys.argv[1])
    # output file
    with open(file, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:
        f.write(&#39; &#39;.join(wordlist))

if __name__ == &amp;quot;__main__&amp;quot;:
    token_file(sys.argv[2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il suffit de taper le nom du fichier contenant des textes chinois comme le premier argument et le nom du fichier de sortie comme le deuxième argument.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python3.7 seg_jieba.py ../DUMP-TEXT/1-16.txt test1.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous avons ensuite fait un test en prenant un de nos dump textes comme l&amp;rsquo;input avec les segmenteurs Jieba et Stanford-Segmenter. Les résultats sont affichés ci-après. Le résultat de Jieba s&amp;rsquo;affiche en haut tandis que celui de Stanford se trouve en bas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/projet_encadre/projet_encadre/blog/screenshot_515.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;Nous pouvons remarquer que le résultat de Jieba est plus satisfasant et se conforme aux habitudes chinoises. Sa reconnaissance des entités nommées, entre autres, ont montré une haute précision.&lt;/p&gt;

&lt;p&gt;Nous avons décidé donc d&amp;rsquo;utiliser notre script Jieba pour la segmentation du corpus chinois dans notre programme final&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cours 10 - Reconstruction du code (Refactoring)</title>
      <link>/projet_encadre/blog/8/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0100</pubDate>
      <guid>/projet_encadre/blog/8/</guid>
      <description>

&lt;p&gt;&lt;code&gt;N.B.&lt;/code&gt; Les explications de chaque commande ou de chaque bloc de codes sont données dans les commentaires.&lt;/p&gt;

&lt;p&gt;Pour que notre script final soit plus lisible et clair, nous avons essayé de remanier notre code en mettant des blocs de code répétitifs dans une fonction. Grâce aux exemples fournis dans &lt;a href=&#34;https://projettal.wordpress.com/2018/11/12/journal-de-travail-seance-2018-11-07-lt/&#34;&gt;le blog d&amp;rsquo;un ancien camarade&lt;/a&gt;, nous avons pu comprendre le foctionnement des fonctions en bash dans un cas précis et concret.&lt;/p&gt;

&lt;h2 id=&#34;script-principal&#34;&gt;Script principal&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
# importer les fonctions
. /Users/becca/Documents/nlp/coursS1/projetEncadre/PROJET-MOT-SUR-LE-WEB/PROGRAMMES/functions.sh
#--------------------Main part-----------------#
# on commence par supprimer l&#39;éventuel fichier de résultat que l&#39;on doit reconstruire
rm -f &amp;quot;$2/tableau2.html&amp;quot; ;
# on récupère les 2 arguments que l&#39;on a passé au programme
# le premier : chemin vers le dossier contenant les fichiers d&#39;URL
# le second : chemin vers le dossier devant contenir le fichier HTML final
echo &amp;quot;Les urls SONT DANS  : $1&amp;quot; ;
echo &amp;quot;On créé le tableau HTML dans : $2&amp;quot; ;
# output=$($2/tableau2.html)
ecrireMetaData $2/tableau2.html
# Création d&#39;une variable pour compter les fichiers traités et donc le nb de tableau généré
numerotableau=1;
# Création d&#39;une variable pour stocker notre terme ciblé
motif=$3;

# Parcours du dossier contenant les fichiers URLs
for fichier in $(ls $1)
do
compteur=1; # compteur destiné à compter les URLs pour chaque fichier d&#39;URL
echo &amp;quot;$1/$fichier&amp;quot; ;
#-----------------------------------------------------------
# Création du tableau associé au fichier en cours de traitement
#-----------------------------------------------------------
ecrireTitre $2/tableau2.html
# &amp;quot;parcours&amp;quot; d&#39;un fichier d&#39;URL : lecture ligne à ligne des URLs
for ligne in $(cat &amp;quot;$1/$fichier&amp;quot;)
  do
  codeRetour=$(detHttpCode $ligne);
  if [[ $codeRetour == 200 ]]
    then
    encodage=$(detEncodage1 $ligne);
    curl -L -o &amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html&amp;quot; &amp;quot;$ligne&amp;quot;;
    echo &amp;quot;ENCODAGE DETECTE PAR CURL : $encodage&amp;quot;;
    if [[ $encodage == &amp;quot;UTF-8&amp;quot; ]]
      then
      procUtf8 $2/tableau2.html
    else # http_code=200, l&#39;encodage n&#39;est pas utf-8
      encodage=$(detEncodage2 $ligne)
      if [[ $encodage == &amp;quot;UTF-8&amp;quot; ]]
        then
        procUtf8 $2/tableau2.html
      else
        code=$(iconv -l|egrep -i $encodage)
        if [[ $code=true ]]
          then
          iconv -f $encodage -t &#39;utf-8&#39; ../DUMP-TEXT/$numerotableau-$compteur.txt &amp;gt; ../DUMP-TEXT/$numerotableau-$compteur-converti.txt
        else
          procVide $2/tableau2.html
        fi
      fi
    fi
  else
    procVide $2/tableau2.html
  fi
  compteur=$((compteur+1)) ;
done
echo &amp;quot;&amp;lt;/table&amp;gt;&amp;lt;br /&amp;gt;&amp;quot; &amp;gt;&amp;gt; $2/tableau2.html ;
# on incrémente le compteur de tableaux
numerotableau=$((numerotableau+1));
done
echo &amp;quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; &amp;gt;&amp;gt; $2/tableau2.html ;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fonctions&#34;&gt;Fonctions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;## functions
# 1 html head
ecrireMetaData(){
  echo &amp;quot;&amp;lt;!DOCTYPE html&amp;gt;&amp;quot; &amp;gt; $1
  echo &amp;quot;&amp;lt;html lang=\&amp;quot;en\&amp;quot;&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
  echo &amp;quot;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;title&amp;gt;Projet Encadre&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
  echo &amp;quot;&amp;lt;body&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
 }
# 2 table title
ecrireTitre(){
  echo &amp;quot;&amp;lt;table border=\&amp;quot;2\&amp;quot; align=\&amp;quot;center\&amp;quot; width=\&amp;quot;80%\&amp;quot;&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
  echo &amp;quot;&amp;lt;tr bgcolor=\&amp;quot;grey\&amp;quot;&amp;gt;&amp;lt;td&amp;gt;N°&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;URL&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Code http&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;encodage&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Page aspirée&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Dump&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Filtrage Txt&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Filtrage Html&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Index&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Bitexte&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Fq Motif&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; $1
}
# 3 get http_code
detHttpCode(){
  curl -SIL -o toto -w &amp;quot;%{http_code}&amp;quot; $1
}
# 4 two ways to get encoding
detEncodage1(){
  curl -sIL -o toto  -w %{content_type} $1 | cut -f2 -d&amp;quot;=&amp;quot; | tr &#39;[a-z]&#39; &#39;[A-Z]&#39; | tr -d &#39;\r&#39;
}
detEncodage2(){
  egrep -oi &#39;charset=&amp;quot;?[^&amp;quot;,]+&amp;quot;?&#39; $1 | cut -f2 -d&amp;quot;=&amp;quot; | tr &#39;[a-z]&#39; &#39;[A-Z]&#39; | tr -d &#39;\r&#39;| head -1
}

# 5 process text when encoding is utf-8
procUtf8(){
  # 1. On lynx la page aspirée
	lynx -dump -nolist -assume_charset=$encodage -display_charset=$encodage &amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html&amp;quot; &amp;gt; ../DUMP-TEXT/$numerotableau-$compteur.txt;
	#-----------------------------------------------------------
	# 2. On cree le fichier contexte TXT via egrep
  egrep -i -C2 &amp;quot;$motif&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt &amp;gt; ../CONTEXTE/$numerotableau-$compteur.txt;
  #-----------------------------------------------------------
	# 3. Fq motif
	nbmotif=$(egrep -coi &amp;quot;$motif&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt;);
	#-----------------------------------------------------------
	# 4. contexte html
	../minigrep/minigrepmultilingue.pl &amp;quot;utf-8&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt ../minigrep/motif-regexp.txt ;
  mv resultat-extraction.html ../CONTEXTES/$numerotableau-$compteur.html ;
	#-----------------------------------------------------------
	# 5. index hierarchique
	egrep -o &amp;quot;\w+&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt | sort | uniq -c | sort -r &amp;gt; ../DUMP-TEXT/index-$numerotableau-$compteur.txt ;
	#-----------------------------------------------------------
	# 6. bigramme
	egrep -o &amp;quot;\w+&amp;quot; ../DUMP-TEXT/$numerotableau-$compteur.txt &amp;gt; bi1.txt;
	tail -n +2 bi1.txt &amp;gt; bi2.txt ;
	paste bi1.txt bi2.txt &amp;gt; bi3.txt ;
	cat bi3.txt | sort | uniq -c | sort -r &amp;gt;  ../DUMP-TEXT/bigramme-$numerotableau-$compteur.txt ;
	#-----------------------------------------------------------
	# 7. on écrit les résultats dans le tableau avec tous les résultats produits
  echo &amp;quot;&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Code_http:$codeRetour&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html\&amp;quot;&amp;gt;$numerotableau-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/$numerotableau-$compteur.txt\&amp;quot;&amp;gt;$numerotableau-$compteur.txt&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../CONTEXTES/$numerotableau-$compteur.txt\&amp;quot;&amp;gt;$numerotableau-$compteur.txt&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../CONTEXTES/$numerotableau-$compteur.html\&amp;quot;&amp;gt;$numerotableau-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/index-$numerotableau-$compteur.txt\&amp;quot;&amp;gt;index-$numerotableau-$compteur&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../DUMP-TEXT/bigramme-$numerotableau-$compteur.txt\&amp;quot;&amp;gt;bigramme-$numerotableau-$compteur&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;$nbmotif&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$1&amp;quot;
}
# 6 write &amp;quot;-&amp;quot; in table
procVide(){
  echo &amp;quot;&amp;lt;tr&amp;gt;
  &amp;lt;td&amp;gt;$compteur&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;$ligne\&amp;quot; target=\&amp;quot;_blank\&amp;quot;&amp;gt;$ligne&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Code_http:$codeRetour&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;Encodage:$encodage&amp;lt;/td&amp;gt;
  &amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;../PAGES-ASPIREES/$numerotableau-$compteur.html\&amp;quot;&amp;gt;$numerotableau-$compteur.html&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;-&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot; &amp;gt;&amp;gt; &amp;quot;$1&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/projet_encadre/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/projet_encadre/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>/projet_encadre/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/projet_encadre/terms/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
